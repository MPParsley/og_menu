diff --git a/og_menu.api.php b/og_menu.api.php
index 1bdb72a..61c18cc 100644
--- a/og_menu.api.php
+++ b/og_menu.api.php
@@ -1,12 +1,18 @@
 <?php
 /**
+ * @file
+ * Documentation of the API functions exposed by this module.
+ */
+
+/**
  * Implements hook_og_menu_admin_menu_overview_form_tableselect().
+ *
  * Useful for other module that extend the functionality of the og menu admin
  * overview form.
  * When a module returns TRUE, the menu table will be rendered with checkboxes
- * in the left collumn.
+ * in the left column.
  *
- * @return boolean
+ * @return bool
  */
 function og_menu_og_menu_admin_menu_overview_form_tableselect() {
   return TRUE;
diff --git a/og_menu.install b/og_menu.install
index 6e927f9..87b94ba 100644
--- a/og_menu.install
+++ b/og_menu.install
@@ -1,5 +1,4 @@
 <?php
-
 /**
  * @file
  * Install, update and uninstall functions for the og_menu module.
@@ -9,6 +8,8 @@
  * Implements hook_schema().
  */
 function og_menu_schema() {
+  $schema = array();
+
   $schema['og_menu'] = array(
     'description' => 'Stores relationships between organic groups and their custom menus.',
     'fields' => array(
@@ -38,10 +39,11 @@ function og_menu_schema() {
         'table' => 'menu_custom',
         'columns' => array(
           'menu_name' => 'menu_name',
-        )
+        ),
       ),
     ),
   );
+
   return $schema;
 }
 
@@ -59,19 +61,23 @@ function og_menu_uninstall() {
     'og_menu_show_menuposition',
     'og_menu_show_nodetype',
   );
+
   // List all og_menu related node type settings vars.
   $node_types = node_type_get_types();
   foreach ($node_types as $type) {
     $vars[] = 'og_menu_enable_' . $type->type;
   }
+
   // Finally, delete all the vars we listed.
   foreach ($vars as $var) {
     variable_del($var);
   }
+
   // Delete custom menus.
   $result = db_select('og_menu', 'm')
     ->fields('m', array('menu_name'))
     ->execute();
+
   while ($record = $result->fetchAssoc()) {
     if ($menu = menu_load($record['menu_name'])) {
       menu_delete($menu);
@@ -80,7 +86,8 @@ function og_menu_uninstall() {
 }
 
 /**
- * Update og_menu schema to store group type and use etid instead of deprecated gid.
+ * Update og_menu schema to store group type and use etid instead of deprecated
+ * gid.
  */
 function og_menu_update_7300(&$sandbox) {
   if (!isset($sandbox['progress'])) {
@@ -117,7 +124,7 @@ function og_menu_update_7300(&$sandbox) {
       'type' => 'int',
       'size' => 'normal',
       'not null' => TRUE,
-      'initial' => 0
+      'initial' => 0,
     ));
   }
 
@@ -144,7 +151,8 @@ function og_menu_update_7300(&$sandbox) {
 }
 
 /**
- * Enable OG Menu functionality for all group content types (backwards compatibility).
+ * Enable OG Menu functionality for all group content types (backwards
+ * compatibility).
  */
 function og_menu_update_7301(&$sandbox) {
   $node_types = node_type_get_types();
@@ -173,13 +181,15 @@ function og_menu_update_7302(&$sandbox) {
   $bundles = og_get_all_group_bundle();
   $enable = FALSE;
 
-  // Check if a setting exists
+  // Check if a setting exists.
   if ($bundles) {
-    foreach($bundles as $entity_type => $entity_bundles) {
+    foreach ($bundles as $entity_type => $entity_bundles) {
       foreach ($entity_bundles as $bundle => $bundle_label) {
         $group_type = strtolower('_' . $bundle);
         $temp = variable_get('og_menu_default_links_' . $entity_type . $group_type, FALSE);
-        if (!empty($temp)) $enable = TRUE;
+        if (!empty($temp)) {
+          $enable = TRUE;
+        }
       }
     }
   }
diff --git a/og_menu.js b/og_menu.js
index 52953c0..cd6e04e 100644
--- a/og_menu.js
+++ b/og_menu.js
@@ -39,7 +39,7 @@ Drupal.ogMenu.bindEvents = function() {
 };
 
 /**
- * Helper to bind indivudual events
+ * Helper to bind individual events
  */
 Drupal.ogMenu.bindEvent = function(type, selector, cardinality) {
   // Autocomplete events can be tricky and need specific logic.
@@ -166,7 +166,7 @@ Drupal.ogMenu.setSelected = function() {
 /**
  * Helper to add items to Drupal.ogMenu.selected without duplicates
  * Handles arrays as well as single values.
- * Rucursive function.
+ * Recursive function.
  */
 Drupal.ogMenu.addSelected = function(val) {
   if (val instanceof Array) {
@@ -226,4 +226,4 @@ Drupal.ogMenu.populateParentSelect = function() {
   });
 }
 
-}(jQuery));
\ No newline at end of file
+}(jQuery));
diff --git a/og_menu.module b/og_menu.module
index ed901ce..9b4f64d 100644
--- a/og_menu.module
+++ b/og_menu.module
@@ -1,5 +1,4 @@
 <?php
-
 /**
  * @file
  * Integrates Menu with Organic Groups.
@@ -36,7 +35,8 @@ function og_menu_og_permission() {
 
 /**
  * Implements hook_og_ui_get_group_admin().
- * */
+ *
+ */
 function og_menu_og_ui_get_group_admin($group_type, $gid) {
   $items = array();
 
@@ -55,11 +55,10 @@ function og_menu_og_ui_get_group_admin($group_type, $gid) {
  * Implements hook_help().
  */
 function og_menu_help($path, $arg) {
-  switch ($path) {
-    case 'admin/structure/og_menu':
-      return '<p>' . t('Add new menus on the <a href="@menu">Menu administration page</a>.', array('@menu' => url('admin/structure/menu'))) . '</p>';
-      break;
+  if ($path == 'admin/structure/og_menu') {
+    return '<p>' . t('Add new menus on the <a href="@menu">Menu administration page</a>.', array('@menu' => url('admin/structure/menu'))) . '</p>';
   }
+
   if ($path == 'group/%/%/admin/menus' && module_exists('block')) {
     if (!variable_get('og_menu_show_blocks', FALSE)) {
       return '<p>' . t('With the current setting, OG Menus will not be
@@ -69,8 +68,9 @@ function og_menu_help($path, $arg) {
     }
     else {
       return '<p>' . t('Each menu has a corresponding block that is managed on
-  the <a href="@blocks">Blocks administration page</a>.',
-  array('@blocks' => url('admin/structure/block'))) . '</p>';
+        the <a href="@blocks">Blocks administration page</a>.', array(
+          '@blocks' => url('admin/structure/block'),
+        )) . '</p>';
     }
   }
 }
@@ -80,6 +80,7 @@ function og_menu_help($path, $arg) {
  */
 function og_menu_menu() {
   $items = array();
+
   $items['group/%/%/admin/menus'] = array(
     'title' => 'Menus',
     'page callback' => 'og_menu_overview_page',
@@ -89,11 +90,13 @@ function og_menu_menu() {
     'weight' => 10,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/list'] = array(
     'title' => 'List menus',
     'weight' => -10,
     'type' => MENU_DEFAULT_LOCAL_TASK,
   );
+
   $items['group/%/%/admin/menus/add'] = array(
     'title' => 'Add menu',
     'page callback' => 'drupal_get_form',
@@ -104,6 +107,7 @@ function og_menu_menu() {
     'weight' => 1,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/%menu'] = array(
     'title' => 'Customize menu',
     'page callback' => 'drupal_get_form',
@@ -114,11 +118,13 @@ function og_menu_menu() {
     'weight' => 1,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/%menu/list'] = array(
     'title' => 'List items',
     'weight' => -10,
     'type' => MENU_DEFAULT_LOCAL_TASK,
   );
+
   $items['group/%/%/admin/menus/%menu/add'] = array(
     'title' => 'Add item',
     'page callback' => 'drupal_get_form',
@@ -129,6 +135,7 @@ function og_menu_menu() {
     'weight' => 1,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/%menu/edit'] = array(
     'title' => 'Edit menu',
     'page callback' => 'drupal_get_form',
@@ -139,6 +146,7 @@ function og_menu_menu() {
     'weight' => 1,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/%menu/delete'] = array(
     'title' => 'Delete menu',
     'page callback' => 'drupal_get_form',
@@ -149,6 +157,7 @@ function og_menu_menu() {
     'weight' => 1,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/%menu/item/%menu_link/edit'] = array(
     'title' => 'Edit menu item',
     'page callback' => 'drupal_get_form',
@@ -159,6 +168,7 @@ function og_menu_menu() {
     'weight' => 1,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['group/%/%/admin/menus/%menu/item/%menu_link/delete'] = array(
     'title' => 'Delete menu item',
     'page callback' => 'drupal_get_form',
@@ -195,11 +205,13 @@ function og_menu_menu() {
     'type' => MENU_NORMAL_ITEM,
     'file' => 'og_menu.pages.inc',
   );
+
   $items['og_menu/autocomplete'] = array(
     'page callback' => '_og_menu_autocomplete',
     'access arguments' => array('og_menu_access'),
     'type' => MENU_CALLBACK,
   );
+
   return $items;
 }
 
@@ -229,7 +241,7 @@ function og_menu_block_view($delta = '') {
   $context = og_context();
   if ($delta == 'og_single_menu_block' && $context) {
     $menus = og_menu_get_group_menus(array(
-      $context['group_type'] => array($context['gid'])
+      $context['group_type'] => array($context['gid']),
     ));
     $menu = array_shift($menus);
 
@@ -243,23 +255,22 @@ function og_menu_block_view($delta = '') {
       $block['content'] = menu_tree($menu['menu_name']);
     }
   }
-  if ($delta == 'og_multi_menu_block' && $context) { // @todo Test this!!
+  if ($delta == 'og_multi_menu_block' && $context) {
+    // @TODO Test this!!
     drupal_add_css(drupal_get_path('module', 'og_menu') . '/og_menu.css');
     $menus = og_menu_get_group_menus(array(
-      $context['group_type'] => array($context['gid'])
+      $context['group_type'] => array($context['gid']),
     ));
     $plural = count($menus) > 1 ? TRUE : FALSE;
     $block['content'] = '';
 
     foreach ($menus as $menu) {
-      $title = ''; $content = '';
+      $title = check_plain($menu['title']);
       if (variable_get('og_menu_block_links', FALSE)) {
         $title = l($menu['title'], $menu['group_type'] . '/' . $menu['gid']);
       }
-      else {
-        $title = check_plain($menu['title']);
-      }
-       if ($tree = menu_tree($menu['menu_name'])) {
+
+      if ($tree = menu_tree($menu['menu_name'])) {
         if ($plural) {
           $block['subject'] = '';
           $block['content'] .= "<div class='block-og-menu-inset'><h2>{$title}</h2>" . render($tree) . "</div>";
@@ -272,6 +283,7 @@ function og_menu_block_view($delta = '') {
       }
     }
   }
+
   return $block;
 }
 
@@ -281,15 +293,16 @@ function og_menu_block_view($delta = '') {
 function og_menu_field_extra_fields() {
   $extra = array();
   foreach (node_type_get_types() as $type) {
-    if (og_is_group_type('node', $type->type)) { // We only need to enable OG Menu on group types.
+    if (og_is_group_type('node', $type->type)) {
+      // We only need to enable OG Menu on group types.
       $extra['node'][$type->type] = array(
         'form' => array(
           'og_menu' => array(
             'label' => t('OG Menu'),
             'description' => t('Enable OG Menu'),
             'weight' => 0,
-          )
-        )
+          ),
+        ),
       );
     }
   }
@@ -343,21 +356,25 @@ function og_menu_form_node_form_alter(&$form, &$form_state) {
         $list[$menu['menu_name']] = $menu['title'];
         $settings['menus'][$menu['menu_name']] = $menu['gid'];
       }
-      // Get the group audience fields so we can make the javascript aware of them.
+      // Get the group audience fields so we can make the javascript aware of
+      // them.
       $settings['group_audience_fields'] = array_keys(og_get_group_audience_fields('node', $type));
 
       $fields = array();
       foreach (og_get_group_audience_fields('node', $type) as $field_name => $label) {
         $field = field_info_field($field_name);
         $instance = field_info_instance('node', $field_name, $type);
-        if ($instance['widget']['type'] == 'og_complex') { // This is currently the only widget in OG.
+        // This is currently the only widget in OG.
+        if ($instance['widget']['type'] == 'og_complex') {
           // Group the data we need in the client side js code.
-          // Notice: 'default' is a reserved word in js, so we use 'normal' instead.
+          // Notice: 'default' is a reserved word in js, so we use 'normal'
+          // instead.
           $fields[$field_name]['normal'] = $instance['settings']['behaviors']['og_widget']['default']['widget_type'];
           $fields[$field_name]['admin'] = $instance['settings']['behaviors']['og_widget']['admin']['widget_type'];
           $fields[$field_name]['cardinality'] = $field['cardinality'];
-          $fields[$field_name]['visibility'] = TRUE; // Field is visible by default.
-          // When using entity reference prepopulate, the field may be hidden
+          // Field is visible by default.
+          $fields[$field_name]['visibility'] = TRUE;
+          // When using entity reference pre-populate, the field may be hidden.
           if (isset($instance['settings']['behaviors']['prepopulate']['action']) && $instance['settings']['behaviors']['prepopulate']['action'] == 'hide' && $context['group_type'] == $field['settings']['target_type']) {
             $fields[$field_name]['visibility'] = $context['gid'];
           }
@@ -382,7 +399,8 @@ function og_menu_form_node_form_alter(&$form, &$form_state) {
         }
 
         $settings['standard_parent_options'] = menu_parent_options($available_menus, $type);
-        // We want to merge the menus the user has available anyway and the OG ones
+        // We want to merge the menus the user has available anyway and the OG
+        // ones.
         $merged_list = array_merge($available_menus, $list);
       }
       else {
@@ -391,10 +409,11 @@ function og_menu_form_node_form_alter(&$form, &$form_state) {
 
       $link = $form['#node']->menu;
 
-      // Menu parent options will format the list in a way Drupal expects and give children, etc
+      // Menu parent options will format the list in a way Drupal expects and
+      // give children, etc.
       $options = menu_parent_options($merged_list, array('mlid' => 0));
 
-      // If user does not have administer menu, this fieldset wont be created.
+      // If user does not have administer menu, this field set wont be created.
       if (!isset($form['menu'])) {
         if (empty($options)) {
           return;
@@ -429,16 +448,16 @@ function og_menu_form_menu_edit_menu_alter(&$form, &$form_state) {
   $types = node_type_get_types();
   $gtypes = array();
   foreach ($types as $type) {
-    if (og_is_group_type('node', $type->type))
+    if (og_is_group_type('node', $type->type)) {
       $gtypes[] = $type->type;
+    }
   }
 
   $types = $gtypes;
 
   if (count($types) > 0) {
     $options = array('' => '--');
-    $values = array();
-    // Populate gids
+    // Populate gids.
     if (user_access('administer group')) {
       $result = db_query("SELECT distinct ogm.gid, n.title FROM {og_membership} ogm LEFT JOIN {node} n ON n.nid = ogm.gid WHERE entity_type='node'");
       foreach ($result as $group) {
@@ -458,14 +477,15 @@ function og_menu_form_menu_edit_menu_alter(&$form, &$form_state) {
     }
 
     $ogm = db_select('og_menu', 'gid')
-            ->fields('gid')
-            ->condition('menu_name', $form['menu_name']['#default_value'], '=')
-            ->execute()
-            ->fetchAssoc();
+      ->fields('gid')
+      ->condition('menu_name', $form['menu_name']['#default_value'], '=')
+      ->execute()
+      ->fetchAssoc();
     $gid = $ogm['gid'];
 
     $og = $gid ? entity_load_single('node', $gid) : NULL;
-    // Add menu og assignment to the form
+
+    // Add menu og assignment to the form.
     switch (variable_get('og_menu_assignment', 'autocomplete')) {
       case 'autocomplete':
         $form['og_menu_gid'] = array(
@@ -485,14 +505,16 @@ function og_menu_form_menu_edit_menu_alter(&$form, &$form_state) {
           '#weight' => 1,
         );
         break;
-      default;
     }
+
     if (!user_access('administer menu')) {
       $form['og_menu_gid']['#required'] = TRUE;
     }
+
     if (!isset($form['submit']['#weight'])) {
       $form['submit']['#weight'] = 2;
     }
+
     $form['#submit'][] = 'og_menu_edit_menu_form_submit';
   }
 }
@@ -518,6 +540,7 @@ function og_menu_form_node_type_form_alter(&$form, &$form_state) {
     '#default_value' => variable_get('og_menu_enable_' . $form['#node_type']->type, FALSE),
     '#description' => t("Allow nodes of this content type to be added to OG Menus."),
   );
+
   if (!og_is_group_content_type('node', $form['#node_type']->type)) {
     $form['menu']['og_menu_enable']['#description'] .= ' <strong>';
     $form['menu']['og_menu_enable']['#description'] .= t("This setting will not
@@ -542,6 +565,7 @@ function og_menu_form_alter(&$form, &$form_state, $form_id) {
       foreach ($result as $ogblock) {
         unset($menus[$ogblock]);
       }
+
       // Parent menu item.
       if ($mlid) {
         $options = menu_parent_options($menus, menu_link_load($mlid));
@@ -558,7 +582,7 @@ function og_menu_form_alter(&$form, &$form_state, $form_id) {
  * Implements hook_form_FORMID_alter().
  */
 function og_menu_form_block_admin_display_form_alter(&$form, &$form_state) {
-// Only show og menu blocks on the block admin page if the user wants it.
+  // Only show og menu blocks on the block admin page if the user wants it.
   if (!variable_get('og_menu_show_blocks', FALSE)) {
     // @todo convert to new database api functions
     $result = db_query("SELECT mc.menu_name FROM {menu_custom} mc, {og_menu} ogm WHERE ogm.menu_name = mc.menu_name")->fetchCol();
@@ -602,7 +626,7 @@ function og_menu_admin_menu_output_alter(&$content) {
     foreach ($content['menu']['admin/structure']['admin/structure/menu'] as $key => $menu) {
       if (preg_match('/^admin\/structure\/menu\/manage\/(\S+)$/', $key, $matches)) {
         $result = db_query("SELECT distinct ogm.gid FROM {og_menu} as ogm where ogm.menu_name = :key", array(':key' => $matches[1]))->fetchCol();
-        if(isset($result[0])) {
+        if (isset($result[0])) {
           unset($content['menu']['admin/structure']['admin/structure/menu'][$key]);
         }
       }
@@ -655,8 +679,9 @@ function og_menu_node_prepare($node) {
             $field_gids += $values;
           }
           // Not ready yet, if a user has access to menus in one group, it does
-          // not mean we can give him access to the menus of all groups he has access to.
-          if (!empty($field_gids) && ! (user_access('administer menu') || user_access('administer og menu'))) {
+          // not mean we can give him access to the menus of all groups he has
+          // access to.
+          if (!empty($field_gids) && !(user_access('administer menu') || user_access('administer og menu'))) {
             foreach ($field_gids as $gid => $name) {
               if (!og_user_access($target_type, $gid, 'administer og menu')) {
                 unset($field_gids[$gid]);
@@ -671,7 +696,7 @@ function og_menu_node_prepare($node) {
     $menus = og_menu_get_group_menus($groups);
     // Store the menus for later use in form_alter and form_validate
     $node->storage['og_menu'] = $menus;
-    // $node is not a new node and menu link is not set
+    // $node is not a new node and menu link is not set.
     if (!empty($node->nid) && empty($node->menu['link_title']) && !empty($menus)) {
       $menu_names = array();
       foreach ($menus as $menu) {
@@ -681,10 +706,11 @@ function og_menu_node_prepare($node) {
       $mlid = db_query_range("SELECT mlid FROM {menu_links} WHERE link_path = :path AND module = 'menu' AND menu_name IN (:type_menus) ORDER BY mlid ASC", 0, 1, array(
         ':path' => 'node/' . $node->nid,
         ':type_menus' => $menu_names,
-      ))
-      ->fetchField();
+      ))->fetchField();
+
       if ($mlid) {
-        // We've found something, so load the item and set that in the node form
+        // We've found something, so load the item and set that in the node
+        // form.
         $item = menu_link_load($mlid);
         $options = menu_parent_options(array($item['menu_name']), $item);
         if (!empty($options)) {
@@ -694,7 +720,6 @@ function og_menu_node_prepare($node) {
             $node->menu['parent_depth_limit'] = _menu_parent_depth_limit($node->menu);
           }
         }
-
       }
     }
   }
@@ -735,8 +760,8 @@ function og_menu_node_update($node) {
       }
       else {
         // Delete the associated menus.
-        // We can't assume that the menu name is 'menu-og-[gid]'
-        // we need to look up menus associated with this group
+        // We can't assume that the menu name is 'menu-og-[gid]'.
+        // we need to look up menus associated with this group.
         $result = db_select('og_menu', 'm')
           ->fields('m', array('menu_name'))
           ->condition('gid', $node->nid, '=')
@@ -760,7 +785,7 @@ function og_menu_node_delete($node) {
   if (og_is_group_type('node', $node->type)) {
     /* We need to be careful here. As users can create menu of whatever name,
      * we can't just delete from menu_custom looking for 'menu-og-' . [gid]
-     * we need the gid of the group being deleted, see if its an og assosiated
+     * we need the gid of the group being deleted, see if its an og associated
      * menu from og_menu and then from that menu name, delete it.
      */
     $result = db_select('og_menu', 'm')
@@ -779,7 +804,9 @@ function og_menu_node_delete($node) {
 
 /**
  * Validation handler for OG group node forms.
- * We will only end up here if we have confirmed that the node is a group type content
+ *
+ * We will only end up here if we have confirmed that the node is a group type
+ * content
  */
 function og_menu_node_form_validate($form, &$form_state) {
   // If the user didn't ask for a menu, we have nothing to do.
@@ -813,9 +840,9 @@ function og_menu_node_form_validate($form, &$form_state) {
   }
   foreach ($menus as $menu) {
     if ($menu['menu_name'] == $parent) {
-      // Check if user has access to the chosen menu parent
+      // Check if user has access to the chosen menu parent.
       $has_menu_access = TRUE;
-      // Check if menu belongs to one of the selected groups
+      // Check if menu belongs to one of the selected groups.
       if (!in_array($menu['gid'], $gids)) {
         form_set_error('og_groups', t('The menu you chose does not belong to the selected groups.'));
       }
@@ -827,7 +854,7 @@ function og_menu_node_form_validate($form, &$form_state) {
 }
 
 /**
- * Updates internal record of group's menu id
+ * Updates internal record of group's menu id.
  */
 function og_menu_update_menu($menu_name, $gid, $group_type) {
   db_merge('og_menu')
@@ -849,14 +876,15 @@ function og_menu_delete_menu($menu_name) {
 }
 
 /**
- * Returns acessible menus for a given user or gids in a structured array.
+ * Returns accessible menus for a given user or gids in a structured array.
  *
- * @param gids
- *    An optional array of groups as returned by og_get_entity_groups().
- * @param user
- *    An optional array of the user object.
- * @return
- *    A structured array with menus list.
+ * @param array $groups
+ *   An optional array of groups as returned by og_get_entity_groups().
+ * @param StdClass $user
+ *   An optional array of the user object.
+ *
+ * @return array
+ *   A structured array with menus list.
  */
 function og_menu_get_group_menus($groups = NULL, $user = NULL) {
   if (!$groups) {
@@ -884,18 +912,13 @@ function og_menu_get_group_menus($groups = NULL, $user = NULL) {
 
   while ($record = $result->fetchAssoc()) {
     $menus[] = $record;
-   }
+  }
 
   return $menus;
 }
 
 /**
  * Access function.
- *
- * @param node
- *    The group node for which the menu is edited.
- * @param menu
- *    The edited menu.
  */
 function og_menu_access($group_type, $gid, $op = NULL) {
   if (!og_is_group($group_type, $gid)) {
@@ -918,7 +941,7 @@ function og_menu_access($group_type, $gid, $op = NULL) {
       }
     }
     else {
-      // return true for all other cases edit menu, add/edit links
+      // Return true for all other cases edit menu, add/edit links.
       return TRUE;
     }
   }
@@ -927,11 +950,6 @@ function og_menu_access($group_type, $gid, $op = NULL) {
 
 /**
  * Generic redirect function.
- *
- * @param form
- *    The form array.
- * @param form_state
- *    The form_state array.
  */
 function og_menu_redirect($form, &$form_state) {
   $group_type = $form['og_menu_group_type']['#value'];
@@ -989,8 +1007,8 @@ function og_menu_delete_menu_confirm_submit_redirect($form, &$form_state) {
 /**
  * Implements hook_menu_delete().
  *
- * Looks like og_menu didn't used to catch the case where a menu item was deleted
- * in the admin area, and forgot to delete it's own db_record
+ * Looks like og_menu did not used to catch the case where a menu item was
+ * deleted in the admin area, and forgot to delete it's own db_record
  */
 function og_menu_menu_delete($menu) {
   db_delete('og_menu')->condition('menu_name', $menu['menu_name'])->execute();
@@ -1003,7 +1021,6 @@ function og_menu_menu_delete($menu) {
  * so that we don't flood the admin pages.
  *
  * @todo get this into og_menu_pages.inc
- *
  */
 function og_admin_standard_menu_overview_page() {
   $result = db_query("SELECT *
@@ -1012,13 +1029,20 @@ function og_admin_standard_menu_overview_page() {
                       FROM {og_menu} om
                       WHERE om.menu_name = mc.menu_name)
                       ORDER BY title;", array(), array('fetch' => PDO::FETCH_ASSOC));
+
   $header = array(t('Title'), array(
       'data' => t('Operations'),
       'colspan' => '3',
-          ));
+    ),
+  );
+
   $rows = array();
   foreach ($result as $menu) {
-    $row = array(theme('menu_admin_overview', array('title' => $menu['title'], 'name' => $menu['menu_name'], 'description' => $menu['description'])));
+    $row = array(theme('menu_admin_overview', array(
+      'title' => $menu['title'],
+      'name' => $menu['menu_name'],
+      'description' => $menu['description'],
+    )));
     $row[] = array('data' => l(t('list links'), 'admin/structure/menu/manage/' . $menu['menu_name']));
     $row[] = array('data' => l(t('edit menu'), 'admin/structure/menu/manage/' . $menu['menu_name'] . '/edit'));
     $row[] = array('data' => l(t('add link'), 'admin/structure/menu/manage/' . $menu['menu_name'] . '/add'));
@@ -1031,8 +1055,8 @@ function og_admin_standard_menu_overview_page() {
 /**
  * Implements hook_menu_alter().
  *
- * We use this to override the /admin/structure/menu callback and replace it with
- * our own og_admin_menu_overview_page().
+ * We use this to override the /admin/structure/menu callback and replace it
+ * with our own og_admin_menu_overview_page().
  */
 function og_menu_menu_alter(&$items) {
   $items['admin/structure/menu']['page callback'] = 'og_admin_standard_menu_overview_page';
@@ -1041,7 +1065,7 @@ function og_menu_menu_alter(&$items) {
 }
 
 /**
- * Retrieve autocomplete suggestions for organic groups
+ * Retrieve auto-complete suggestions for organic groups.
  */
 function _og_menu_autocomplete($string) {
   $matches = array();
@@ -1056,17 +1080,22 @@ function _og_menu_autocomplete($string) {
   foreach ($return as $row) {
     $matches[$row->title . " [gid:$row->gid]"] = '<div class="og-autocomplete">' . $row->title . '</div>';
   }
-  // return for JS
+  // Return for json.
   drupal_json_output($matches);
 }
 
 /**
- * Return a list of node groups corresponding to nodes
+ * Return a list of node groups corresponding to nodes.
  *
  * @see og_get_entity_groups()
- * @param string $group_type the entity type .eg node, user
- * @param object the object in question .eg node user
- * @return array the gids corresponding to the criteria or empty
+ *
+ * @param string $group_type
+ *   The entity type .eg node, user
+ * @param object $object
+ *   The object in question .eg node user
+ *
+ * @return array
+ *   The gids corresponding to the criteria or empty
  */
 function og_menu_get_node_groups($group_type, $object) {
   $groups = og_get_entity_groups($group_type, $object);
@@ -1084,8 +1113,9 @@ function og_menu_get_node_groups($group_type, $object) {
 /**
  * Adds a standard menu fieldset to a form, mainly copied from menu.module.
  *
- * @param type $form the form we will add a menu fieldset to
- * @param type $optione
+ * @param array $form
+ *   The form we will add a menu field set to.
+ * @param array $options
  */
 function _og_menu_add_menufieldset(&$form, $options) {
   $link = $form['#node']->menu;
diff --git a/og_menu.pages.inc b/og_menu.pages.inc
index 0182251..9cdf9f2 100644
--- a/og_menu.pages.inc
+++ b/og_menu.pages.inc
@@ -1,13 +1,14 @@
 <?php
-
 /**
  * @file
  * Contains page callbacks for og_menu
  */
 
 /**
- * Menu callback which shows an overview page of all the custom menus in a
- * user's group and along with their description.
+ * Menu callback.
+ *
+ * Shows an overview page of all the custom menus in a user's group and along
+ * with their description.
  */
 function og_menu_overview_page($group_type, $gid) {
   // Set the title of the page.
@@ -27,7 +28,13 @@ function og_menu_overview_page($group_type, $gid) {
   $header = array(t('Title'), array('data' => t('Operations'), 'colspan' => '3'));
   $rows = array();
   foreach ($result as $menu) {
-    $row = array(theme('menu_admin_overview', array('title' => $menu->title, 'name' => $menu->name, 'description' => $menu->description)));
+    $row = array(
+      theme('menu_admin_overview', array(
+        'title' => $menu->title,
+        'name' => $menu->name,
+        'description' => $menu->description,
+      )),
+    );
     $row[] = array('data' => l(t('list links'), 'group/' . $group_type . '/' . $gid . '/admin/menus/' . $menu->name));
     $row[] = array('data' => l(t('edit menu'), 'group/' . $group_type . '/' . $gid . '/admin/menus/' . $menu->name . '/edit'));
     $row[] = array('data' => l(t('add link'), 'group/' . $group_type . '/' . $gid . '/admin/menus/' . $menu->name . '/add'));
@@ -43,7 +50,9 @@ function og_menu_overview_page($group_type, $gid) {
 }
 
 /**
- * Menu callback; Build the form that handles the adding/editing of a custom menu.
+ * Menu callback.
+ *
+ * Build the form that handles the adding/editing of a custom menu.
  */
 function og_menu_edit_menu_form($form, &$form_state, $type, $group_type, $gid, $menu = array()) {
   module_load_include('inc', 'menu', 'menu.admin');
@@ -87,7 +96,7 @@ function og_menu_edit_menu_form($form, &$form_state, $type, $group_type, $gid, $
 }
 
 /**
- * Submit handler for og_menu_edit_menu_form
+ * Submit handler for og_menu_edit_menu_form().
  */
 function og_menu_delete_menu_form_submit($form, &$form_state) {
   $group_type = $form['og_menu_group_type']['#value'];
@@ -216,8 +225,7 @@ function og_menu_edit_item_form($form, &$form_state, $type, $group_type, $gid, $
     $form['actions']['delete'] = array(
       '#type' => 'link',
       '#title' => 'Delete',
-      '#href' => 'group/' . $group_type . '/' . $gid . '/admin/menus/'
-        . $menu['menu_name'] . '/item/' . $item['mlid'] . '/delete',
+      '#href' => 'group/' . $group_type . '/' . $gid . '/admin/menus/' . $menu['menu_name'] . '/item/' . $item['mlid'] . '/delete',
       '#weight' => 10,
     );
   }
@@ -225,7 +233,7 @@ function og_menu_edit_item_form($form, &$form_state, $type, $group_type, $gid, $
 }
 
 /**
- * Form callback for node/%node/og_menu/%menu/item/%menu_link/delete page
+ * Form callback for node/%node/og_menu/%menu/item/%menu_link/delete page.
  */
 function og_menu_delete_item_form($form, &$form_state, $item, $group_type, $gid, $menu) {
   module_load_include('inc', 'menu', 'menu.admin');
@@ -257,8 +265,7 @@ function og_menu_config_form($form, &$form_state) {
     '#type' => 'checkbox',
     '#title' => t('Convert OG Menu block titles into links'),
     '#default_value' => variable_get('og_menu_block_links', FALSE),
-    '#description' =>
-      t('If enabled, OG Menu block titles will link to the groupnode.'),
+    '#description' => t('If enabled, OG Menu block titles will link to the groupnode.'),
   );
   $form['og_menu_create_by_default'] = array(
     '#type' => 'checkbox',
@@ -281,13 +288,14 @@ function og_menu_config_form($form, &$form_state) {
 
   $form['og_menu_assignment'] = array(
     '#type' => 'radios',
-    '#options' => array('select' => t('Select list'),
-      'autocomplete' => t('Textbox with autocomplete')),
+    '#options' => array(
+      'select' => t('Select list'),
+      'autocomplete' => t('Textbox with autocomplete'),
+    ),
     '#title' => t('Use autocomplete field on menu admin page'),
     '#default_value' => variable_get('og_menu_assignment', 'autocomplete'),
     '#required' => 'TRUE',
-    '#description' =>
-      t('Autocomplete is recommended when you have a lot of organic groups.'),
+    '#description' => t('Autocomplete is recommended when you have a lot of organic groups.'),
   );
 
   // Visibility setting to hide OG Menus on selected pages.
@@ -299,31 +307,31 @@ function og_menu_config_form($form, &$form_state) {
   );
 
   $form['og_menu_visibility']['og_menu_show_blocks'] = array(
-      '#type' => 'checkbox',
-      '#title' => t("Show blocks for individual OG Menus"),
-      '#default_value' => variable_get('og_menu_show_blocks', FALSE),
-      '#description' => t("If disabled, blocks for OG Menus will be hidden from the block administration page."),
+    '#type' => 'checkbox',
+    '#title' => t("Show blocks for individual OG Menus"),
+    '#default_value' => variable_get('og_menu_show_blocks', FALSE),
+    '#description' => t("If disabled, blocks for OG Menus will be hidden from the block administration page."),
   );
   $form['og_menu_visibility']['og_menu_show_nodetype'] = array(
-      '#type' => 'checkbox',
-      '#title' => t("Include OG Menus in node type menu settings"),
-      '#default_value' => variable_get('og_menu_show_nodetype', FALSE),
-      '#description' => t("If disabled, OG Menus will be hidden from the node type config page."),
+    '#type' => 'checkbox',
+    '#title' => t("Include OG Menus in node type menu settings"),
+    '#default_value' => variable_get('og_menu_show_nodetype', FALSE),
+    '#description' => t("If disabled, OG Menus will be hidden from the node type config page."),
   );
   if (module_exists('menu_position')) {
     $form['og_menu_visibility']['og_menu_show_menuposition'] = array(
-        '#type' => 'checkbox',
-        '#title' => t("Show as available parent in menu position rules."),
-        '#default_value' => variable_get('og_menu_show_menuposition', FALSE),
-        '#description' => t("If disabled, OG Menus will be hidden from the menu position parent selection dropdown."),
+      '#type' => 'checkbox',
+      '#title' => t("Show as available parent in menu position rules."),
+      '#default_value' => variable_get('og_menu_show_menuposition', FALSE),
+      '#description' => t("If disabled, OG Menus will be hidden from the menu position parent selection dropdown."),
     );
   }
   if (module_exists('homebox')) {
     $form['og_menu_visibility']['og_menu_show_homebox'] = array(
-        '#type' => 'checkbox',
-        '#title' => t("Show blocks in Homebox admin page"),
-        '#default_value' => variable_get('og_menu_show_homebox', FALSE),
-        '#description' => t("If disabled, blocks for OG Menus will be hidden from the homebox administration page."),
+      '#type' => 'checkbox',
+      '#title' => t("Show blocks in Homebox admin page"),
+      '#default_value' => variable_get('og_menu_show_homebox', FALSE),
+      '#description' => t("If disabled, blocks for OG Menus will be hidden from the homebox administration page."),
     );
   }
   return system_settings_form($form);
@@ -343,7 +351,7 @@ function og_menu_config_form_validate($form, &$form_state) {
 
   foreach ($form_state['values'] as $form_index => $form_val) {
     if (preg_match('/^og_menu_default_links_(\w+)$/', $form_index)) {
-      $links = explode("\n", $form_val );
+      $links = explode("\n", $form_val);
       foreach ($links as $link) {
         $link_parts = explode('|', $link);
         if (substr($link_parts[0], 0, 1) == '/') {
@@ -356,8 +364,10 @@ function og_menu_config_form_validate($form, &$form_state) {
 }
 
 /**
- * Callback for admin/structure/og_menu
- * Just duplicates the standard menu list, but only displays those created through og_menu
+ * Callback for admin/structure/og_menu.
+ *
+ * Just duplicates the standard menu list, but only displays those created
+ * through og_menu.
  */
 function og_admin_menu_overview_form($form, $form_state) {
   $session = isset($_SESSION['og_menu_filter']) ? $_SESSION['og_menu_filter'] : array();
@@ -395,22 +405,19 @@ function og_admin_menu_overview_form($form, $form_state) {
     $form['filters']['og_menu_actions']['reset'] = array('#type' => 'submit', '#value' => t('Reset'));
   }
 
-  $header = array(t('Title'), array(
-    'data' => t('Operations'),
-    'colspan' => '4',
-  ));
   $header = array(
     'title' => array('data' => 'Title', 'field' => 'title', 'sort' => 'asc'),
     'type' => array('data' => 'Group Type', 'field' => 'group_type'),
     'list' => array('data' => 'Operations'),
-    'edit' => array('data' => '',),
+    'edit' => array('data' => ''),
     'add' => array('data' => ''),
     'view' => array('data' => ''),
   );
 
   // Build Query (extend for paging and sorting).
   $query = db_select('menu_custom', 'mc')->extend('PagerDefault')->limit(20);
-  $query->join('og_menu', 'om', 'mc.menu_name = om.menu_name');    //Pager Extender
+  // Pager Extender.
+  $query->join('og_menu', 'om', 'mc.menu_name = om.menu_name');
   $query->fields('mc')
     ->fields('om')
     ->orderBy('title')
@@ -425,12 +432,17 @@ function og_admin_menu_overview_form($form, $form_state) {
   $result = $query->execute();
 
   // Build table.
-  $rows = array();
   $options = array();
   foreach ($result as $menu) {
     $options[$menu->menu_name] = array(
-      'title' => array( 'data' => theme('menu_admin_overview', array('title' => $menu->title, 'name' => $menu->menu_name, 'description' => $menu->description)) ),
-      'type' => array( 'data' => $menu->group_type ),
+      'title' => array(
+        'data' => theme('menu_admin_overview', array(
+          'title' => $menu->title,
+          'name' => $menu->menu_name,
+          'description' => $menu->description,
+        )),
+      ),
+      'type' => array('data' => $menu->group_type),
       'list' => array(
         'data' => array(
           '#type' => 'link',
@@ -494,9 +506,9 @@ function og_admin_menu_overview_form_submit($form, &$form_state) {
     case 'edit-submit':
       if (isset($form_state['values']['og_menu_filter']) && $form_state['values']['og_menu_filter'] != '') {
         $_SESSION['og_menu_filter'][] = array('og_menu_filter', $form_state['values']['og_menu_filter']);
-
       }
       break;
+
     case 'edit-reset':
       $_SESSION['og_menu_filter'] = array();
       break;
